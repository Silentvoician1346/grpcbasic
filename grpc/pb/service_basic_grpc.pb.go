// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: service_basic.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasicTestClient is the client API for BasicTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicTestClient interface {
	CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error)
	GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error)
}

type basicTestClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicTestClient(cc grpc.ClientConnInterface) BasicTestClient {
	return &basicTestClient{cc}
}

func (c *basicTestClient) CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CreateCountryResponse, error) {
	out := new(CreateCountryResponse)
	err := c.cc.Invoke(ctx, "/proto.BasicTest/CreateCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicTestClient) GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*GetCountryResponse, error) {
	out := new(GetCountryResponse)
	err := c.cc.Invoke(ctx, "/proto.BasicTest/GetCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicTestServer is the server API for BasicTest service.
// All implementations must embed UnimplementedBasicTestServer
// for forward compatibility
type BasicTestServer interface {
	CreateCountry(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error)
	GetCountry(context.Context, *GetCountryRequest) (*GetCountryResponse, error)
	mustEmbedUnimplementedBasicTestServer()
}

// UnimplementedBasicTestServer must be embedded to have forward compatible implementations.
type UnimplementedBasicTestServer struct {
}

func (UnimplementedBasicTestServer) CreateCountry(context.Context, *CreateCountryRequest) (*CreateCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountry not implemented")
}
func (UnimplementedBasicTestServer) GetCountry(context.Context, *GetCountryRequest) (*GetCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}
func (UnimplementedBasicTestServer) mustEmbedUnimplementedBasicTestServer() {}

// UnsafeBasicTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicTestServer will
// result in compilation errors.
type UnsafeBasicTestServer interface {
	mustEmbedUnimplementedBasicTestServer()
}

func RegisterBasicTestServer(s grpc.ServiceRegistrar, srv BasicTestServer) {
	s.RegisterService(&BasicTest_ServiceDesc, srv)
}

func _BasicTest_CreateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicTestServer).CreateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BasicTest/CreateCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicTestServer).CreateCountry(ctx, req.(*CreateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicTest_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicTestServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BasicTest/GetCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicTestServer).GetCountry(ctx, req.(*GetCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicTest_ServiceDesc is the grpc.ServiceDesc for BasicTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BasicTest",
	HandlerType: (*BasicTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCountry",
			Handler:    _BasicTest_CreateCountry_Handler,
		},
		{
			MethodName: "GetCountry",
			Handler:    _BasicTest_GetCountry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_basic.proto",
}
